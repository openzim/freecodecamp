#!/usr/bin/env python
# -*- coding: utf-8 -*-
# vim: ai ts=4 sts=4 et sw=4 nu
import argparse

from fcctozim import VERSION, logger
from fcctozim.build import build
from fcctozim.fetch import fetch_command
from fcctozim.prebuild import prebuild_command

def main(args):
    command = args.command

    if command == 'fetch':
        fetch_command(args)
    elif command == 'prebuild':
        prebuild_command(args)
    elif command == 'zim':
        build(args)
    elif command == 'all':
        fetch_command(args)
        prebuild_command(args)
        build(args)

argsActions = {
    'tmpdir': {'flags': '--tmpdir', 'type': str, 'help': 'the temporary directory to hold the curriculum'},
    'force': {'flags': '--force', 'type': bool, 'help': 'force a re-download of the curriculum zip'},
    'language': {'flags': '--language', 'type': str, 'help': 'Curriculum language'},
    'course': {'flags': '--course', 'type': str, 'help': 'Course or course list (separated by commas)', 'required': True},
    'curriculumdir': {'flags': '--curriculumdir', 'type': str, 'help': 'the directory to place the processed curriculum', 'required': True},
    'clientdir': {'flags': '--clientdir', 'type': str, 'help': 'the directory containing our Vite application', 'required': True},
    'outpath': {'flags': '--outpath', 'type': str, 'help': 'output path', 'required': True},
    'outzim': {'flags': '--outzim', 'type': str, 'help': 'the path of our output file'},
    'title': {'flags': '--title', 'type': str, 'help': 'Title of zim file', 'required': True},
    'name': {'flags': '--name', 'type': str, 'help': 'Name of zim file', 'required': True},
    'description': {'flags': '--description', 'type': str, 'help': 'Description of zim file', 'required': True},
    'creator': {'flags': '--creator', 'type': str, 'help': 'Creator of the zim files content'},
    'publisher': {'flags': '--publisher', 'type': str, 'help': 'Publisher of the zim file'}
}

def add_arguments(parser, arg):
    parser.add_argument(arg['flags'], type=arg.get('type', str), help=arg['help'], required=arg.get('required', False))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog='fcc2zim')


    # create sub-parser
    sub_parsers = parser.add_subparsers(help='sub-command help', dest='command')

    fetch_cmd = sub_parsers.add_parser('fetch', help='fetch the latest curriculum')
    add_arguments(fetch_cmd, [
        argsActions['tmpdir'],
        argsActions['force']
    ])

    prebuild_cmd = sub_parsers.add_parser('prebuild', help='prebuild curriculum for Vite frontend')
    add_arguments(prebuild_cmd, [
        argsActions['language'],
        argsActions['course'],
        argsActions['curriculumdir'],
        argsActions['tmpdir'],
    ])

    zim_cmd = sub_parsers.add_parser('zim', help='package up the zim file')
    add_arguments(zim_cmd, [
        argsActions['clientdir'],
        argsActions['outzim'],
        argsActions['language'],
        argsActions['title'],
        argsActions['name'],
        argsActions['description'],
        argsActions['creator'],
        argsActions['publisher'],
    ])

    all_cmd = sub_parsers.add_parser('all', help='fetch, build and package up a zim file')
    add_arguments(all_cmd, [
        argsActions['tmpdir'],
        argsActions['force'],
        argsActions['course'],
        argsActions['curriculumdir'],
        argsActions['clientdir'],
        argsActions['outzim'],
        argsActions['outpath'],
        argsActions['language'],
        argsActions['title'],
        argsActions['name'],
        argsActions['description'],
        argsActions['creator'],
        argsActions['publisher'],
    ])

    args = parser.parse_args()
    if args.command:
        main(args)
    else:
        parser.print_usage()
